from pwn import *



def min_path_sum(grid, rows, cols):

    """Calculate the minimum path sum for the grid."""

    dp = [[0] * cols for _ in range(rows)]

    dp[0][0] = grid[0][0]



    # Initialize first row and first column

    for i in range(1, rows):

        dp[i][0] = dp[i - 1][0] + grid[i][0]

    for j in range(1, cols):

        dp[0][j] = dp[0][j - 1] + grid[0][j]



    # Fill the rest of the dp table

    for i in range(1, rows):

        for j in range(1, cols):

            dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1])



    return dp[-1][-1]



def main():

    # Connect to the server

    conn = remote('xx.xxx.xxx.xxx', 00000)



    for test in range(100):

        # Read the grid dimensions

        conn.recvuntil(b'Test ')

        conn.recvline()  # Skip the test number line

        dims = conn.recvline().decode().strip().split()

        rows, cols = map(int, dims)



        # Read the grid data

        data = conn.recvline().decode().strip().split()

        grid = [list(map(int, data[i * cols:(i + 1) * cols])) for i in range(rows)]



        # Compute the minimum path sum

        result = min_path_sum(grid, rows, cols)



        # Send the result

        conn.sendline(str(result).encode())



        # Log progress

        log.info(f'Test {test + 1}/100 completed with result: {result}')



    # Print final message from server

    print(conn.recvall().decode())



if __name__ == "__main__":

    main()

